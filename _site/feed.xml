<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andres Galante</title>
    <description>This is Andrés Galantes personal blog. Cyclist, dad, designer, diver, entrepreneur, frontend coder,  guitarist, redhatter, husband and tenis player (in alphabetical order).
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 27 Dec 2017 14:37:21 -0300</pubDate>
    <lastBuildDate>Wed, 27 Dec 2017 14:37:21 -0300</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>5 killer tricks to make your Java webapp look awesome</title>
        <description>&lt;p&gt;This article is based on my notes for the presentation I gave at JavaOne 2017. Here is a video of the same presentation:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/MGlYoBrZkFQ?start=128&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;During my years working with java developers, I’ve noticed they face two challenges:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They have a hard time making UIs look good.&lt;/li&gt;
  &lt;li&gt;And for the ones working with designers, they have bad experiences relating to them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t take my word for it, Java Champion Bruno Souza once told me that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“We always do ugly things… always…””&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And he is not alone: Gustavo and Bazlur, like many others java developers have problems either creating good UIs or relating with designers:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I find hard time with alignment.”
Bazlur rahman, JUG leader&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“What frustrates me is the time I spend to get the layout the way I’d like it to be.”
Gustavo Muniz do Carmo, Java Dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But creating great UIs is not just about making them look great, but also about making them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Load fast.&lt;/li&gt;
  &lt;li&gt;Work in every single device independent of their size and capabilities.&lt;/li&gt;
  &lt;li&gt;Accessible for anyone disregarding of their abilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s why this article will cover 5 essential design principles to create amazing applications for java developer to follow:&lt;/p&gt;

&lt;h2 id=&quot;1-understand-your-users-needs&quot;&gt;1. Understand your user’s needs&lt;/h2&gt;

&lt;p&gt;Having empathy with your users is an essential part of design. We all talk about putting yourself in our user’s shoes, but do we actually know what their needs are? How much time do we actually spend watching a user use their products?&lt;/p&gt;

&lt;p&gt;Probably not much, and you’d be surprised to know that most developers I know have never seen a user using your product, and they end up taking decisions based on assumptions.&lt;/p&gt;

&lt;p&gt;Assumptions are really dangerous! If you assume you will never be able to walk in their shoes.&lt;/p&gt;

&lt;p&gt;Never assume you know what they need. I am 100% sure your user needs are not your needs.&lt;/p&gt;

&lt;p&gt;How to know what are user needs? Here is a secret, the most meaningful type of user research is really easy!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sit down beside a user, give them a task to do watch them use your product! Don’t say anything, don’t ask anything, don’t help them.&lt;/li&gt;
  &lt;li&gt;When they are done: Have a chat with them!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This exercise will be an eye opening experience for you and your team and I guarantee that you will never think about your product the same way.&lt;/p&gt;

&lt;p&gt;This is extremely important to succeed, if you don’t understand what your users needs, everything else you do doesn’t matter.&lt;/p&gt;

&lt;p&gt;My advice is to do this at least one hour a month.&lt;/p&gt;

&lt;p&gt;Now that you know how to discover your users needs and you are ready to create content.&lt;/p&gt;

&lt;h2 id=&quot;2-create-great-content&quot;&gt;2. Create great content&lt;/h2&gt;

&lt;p&gt;Content, like text, images and data is the most important asset you own.&lt;/p&gt;

&lt;p&gt;You structure it with HTML, style it with CSS and create interactions with JS. It’s the front end stack.&lt;/p&gt;

&lt;p&gt;If you don’t know HTML don’t feel bad, Linus Torvalds once told that he doesn’t have a website because he don’t know html.&lt;/p&gt;

&lt;p&gt;It doesn’t matter how beautiful your code and your style are, if your content stinks, your app will stink too.&lt;/p&gt;

&lt;p&gt;Now, as Java developers you will probably use a UI framework to wrap your content, and there are many great well known options like Bootstrap, Foundation, and Material, or some less known ones such as Bulma or Tachyons.&lt;/p&gt;

&lt;p&gt;Since I am a core team member of Bootstrap, I will write about Bootstrap.&lt;/p&gt;

&lt;p&gt;Bootstrap is world’s most popular front-end component library to build responsive, mobile-first projects on the web, and it will help you structure your content into semantic markup that’s accessible, style it with responsive CSS and give behaviours with JS.&lt;/p&gt;

&lt;h2 id=&quot;3-build-accessible-responsive-and-performant-uis&quot;&gt;3. Build accessible, responsive and performant UIs&lt;/h2&gt;

&lt;p&gt;Apart from a great set of UI components, Bootstrap ships a powerful responsive grid system to deal with layouts at the insane reality we live in.&lt;/p&gt;

&lt;h3 id=&quot;responsive&quot;&gt;Responsive&lt;/h3&gt;

&lt;p&gt;This is the web today is insiane, we have devices with different screen sizes, different capabilities, different browsers and the web is even in places without screens like cars or refrigerators!&lt;/p&gt;

&lt;p&gt;We don’t know where our content will land, will it be a tiny device with a stylus or a huge touch screen?&lt;/p&gt;

&lt;h3 id=&quot;accessible&quot;&gt;Accessible&lt;/h3&gt;

&lt;p&gt;And then we need to think about the user, humans, like devices, comes in all sizes, shapes and capabilities too, and we need to take accessibility in consideration. Let me tell you a story: My second son’s name is Federico and he is one year and a half old. When he was born we’ve been told that his hearing test gave a negative result. That meant that he might have hearing problems. And as I was in the hospital with little Federico in my arms, I promise myself that I will do my absolute best to ensure that everything I produce is accessible.&lt;/p&gt;

&lt;p&gt;When Federico was a year old, we tested him again and the results were positive, thank God he is ok now. But since then everything that my team or I do has baked in accessibility.&lt;/p&gt;

&lt;p&gt;At the end of the day, there are way more disabled users than IE users, and we care a lot about making things look good on IE.&lt;/p&gt;

&lt;h2 id=&quot;performant&quot;&gt;Performant&lt;/h2&gt;

&lt;p&gt;On top of that, you need to think about performance, you only have users attentions for few seconds. In fact, according to the national center of biotechnology, the average attention span of a human dropped from 12 seconds in the year 2000 to 8 seconds in 2015. That’s one second less than the attention span of a goldfish!&lt;/p&gt;

&lt;p&gt;So treat the web as if it was a &lt;a href=&quot;https://www.google.com/search?tbm=isch&amp;amp;source=hp&amp;amp;biw=1364&amp;amp;bih=1252&amp;amp;q=liquid+cat&amp;amp;oq=liquid+cat&amp;amp;gs_l=img.3..0l10.960.2084.0.3268.11.9.0.0.0.0.262.1296.0j2j4.6.0....0...1.1.64.img..5.6.1295.0...0.pRXo5V9Maz0&quot;&gt;liquid Cat&lt;/a&gt;: Fast and fluid! It must be Responsive, Accessible and Performant.&lt;/p&gt;

&lt;p&gt;In order to support this reality we structure our HTML in either be a component or a layout. Components will stretch out to the size of it’s container, and the grid (or layout) will regulate the placement and size ignoring completely what happens inside them.&lt;/p&gt;

&lt;p&gt;Don’t ever mix grids with components in the same tag. Define your grid and then add components inside.&lt;/p&gt;

&lt;h2 id=&quot;4-establish-a-maintainable-architectures&quot;&gt;4. Establish a maintainable architectures&lt;/h2&gt;

&lt;p&gt;The way you architecture your CSS is critical for a successful application. If you fail, you’ll end up with brittle structure that will be impossible to maintain in the future.&lt;/p&gt;

&lt;p&gt;The way to use a framework like Bootstrap wisely is to create isolated components instead of extending their components. You’ll end up with bootstrap on one side and your things in another.&lt;/p&gt;

&lt;p&gt;Every component should be an island, nothing should depend on each other. Each thing should be it’s own thing, not an extension of another thing.&lt;/p&gt;

&lt;p&gt;That way, when a new version of your framework comes up, you’ll be able to easily update and a component you build today to live side by side with one you build 5 years from now.&lt;/p&gt;

&lt;h2 id=&quot;5-keep-consistency-across-your-ui&quot;&gt;5. Keep Consistency across your UI&lt;/h2&gt;

&lt;p&gt;This is a hot topic nowadays with the era of design systems.
“Consistency is one of the most powerful usability principles: when things always behave the same, users don’t have to worry about what will happen. Instead, they know what will happen based on earlier experience. “&lt;/p&gt;

&lt;p&gt;Make sure to reuse the same variables for spacer, shadows, border, and animations. Define it once, use them everywhere&lt;/p&gt;

&lt;h2 id=&quot;try-it-yourself&quot;&gt;Try it yourself&lt;/h2&gt;

&lt;p&gt;These are just 5 starting point that will be immensely helpful for your app.&lt;/p&gt;

&lt;p&gt;Remember to understand your users to create great content, build responsive, accessible, and performant structures on a maintainable structure and keep consistency!&lt;/p&gt;

&lt;p&gt;And if I can help in anyway please &lt;a href=&quot;https://twitter.com/andresgalante&quot;&gt;contact me on twitter @andregsalante&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/Una&quot;&gt;Una Kravets&lt;/a&gt; is absolutely right, you just can’t learn everything.&lt;/p&gt;

&lt;p&gt;This is the list of things I would have liked to know if I had to start today:&lt;/p&gt;

&lt;h2 id=&quot;1-dont-underestimate-how-hard-css-is&quot;&gt;1. Don’t underestimate how hard CSS is&lt;/h2&gt;

&lt;p&gt;CSS looks easy. After all it’s just a set of rules that selects an element and modifies it based on a set of properties and values.&lt;/p&gt;

&lt;p&gt;It’s so much more than that.&lt;/p&gt;

&lt;p&gt;A successful CSS project requires the most impeccable architecture. Poorly written CSS is brittle and quickly becomes difficult to maintain. It’s critical you learn how to organize your code in order to create maintainable structures with a long lifespan.&lt;/p&gt;

&lt;p&gt;But even an excellent code base has to deal with the insane amount of devices, screen sizes, capabilities and user preferences. Not to mention accessibility, internationalization and browser support!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS is like a bear cub: cute and inoffensive, but when he grows he’ll eat you alive&lt;/strong&gt;. Experience, hard work and study will teach you how to tame the beast.&lt;/p&gt;

&lt;h2 id=&quot;2-share-and-participate&quot;&gt;2. Share and participate&lt;/h2&gt;

&lt;p&gt;Sharing is so important! How I wish someone had told me that when I started. I’ve spent the first 10 years of my career ignoring the importance of sharing, and when I finally learned, it completely changed  how I viewed my work and working with others.&lt;/p&gt;

&lt;p&gt;Learn git. &lt;a href=&quot;http://andresgalante.com/design/2015/08/31/adopt-a-deisgner.html&quot;&gt;Git is the language of open source&lt;/a&gt; and you definitely want to be part of the it.&lt;/p&gt;

&lt;p&gt;Great developers are kind and generous. A healthy community is full of great developers and you want to be around them. The sooner the better.&lt;/p&gt;

&lt;p&gt;Remember that you are as good as the people that surrounds you, so be kind and generous.&lt;/p&gt;

&lt;p&gt;Share everything you learn. The path is as important as the end result, even the tiniest things can make a difference to others.&lt;/p&gt;

&lt;p&gt;Write and read documentation. Remember that good development is documentation driven development.&lt;/p&gt;

&lt;h2 id=&quot;3-pick-the-right-tools&quot;&gt;3. Pick the right tools&lt;/h2&gt;

&lt;p&gt;Tools are very important, they allow you do your craft.&lt;/p&gt;

&lt;p&gt;Learn your way around your code editor. It should be an extension of your mind.&lt;/p&gt;

&lt;p&gt;It doesn’t matter if you use &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt; or old school &lt;a href=&quot;https://vim.sourceforge.io/&quot;&gt;Vim&lt;/a&gt;, the better you shape your tools to your thought process, the better developer you’ll become. You’ll not only gain speed but also have an uninterrupted thought line that result in a fluid ideas.&lt;/p&gt;

&lt;p&gt;The terminal is your friend.&lt;/p&gt;

&lt;p&gt;There is a lot more about been a CSS developer than writing CSS. Things like building your code, compiling, linting, formatting and browser live refresh are just a tiny part of what you’ll have to deal in a daily bases.&lt;/p&gt;

&lt;p&gt;Pick up your way around the terminal and learn CLI as soon as possible.&lt;/p&gt;

&lt;p&gt;Don’t forget that as a developer you are responsible to stay up to date with best practice. Follow resources like W3C and MDN to stay up to date.&lt;/p&gt;

&lt;h2 id=&quot;4-get-to-know-the-browser&quot;&gt;4. Get to know the browser&lt;/h2&gt;

&lt;p&gt;The browser is not only your canvas, but also a powerful inspector to debug your code, test performance and learn from others. Become comfortable using the inspector.&lt;/p&gt;

&lt;p&gt;Learn how the browser renders your code, what is its inner working and how to improve your work.&lt;/p&gt;

&lt;p&gt;Every browser is different, embrace it. Love them for what they are. (Yes, even IE).&lt;/p&gt;

&lt;h2 id=&quot;5-learn-to-write-maintainable-css&quot;&gt;5. Learn to write maintainable CSS&lt;/h2&gt;

&lt;p&gt;It’ll probably take you years, but if there is just one single skill a CSS developer should have is to write maintainable structures.&lt;/p&gt;

&lt;p&gt;This means knowing exactly how the cascade, the box model and specificity works. Master CSS architecture models, learn their pros and cons and how to implement them.&lt;/p&gt;

&lt;p&gt;This is a hole you can dig for ever, the more you learn the less you’ll know. Keep up with the trends, &lt;strong&gt;have an opinion and only follow the things that makes sense to you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Remember that a modular architecture leads to independent modules, good performance, accessible structures and responsive components (aka CSS happiness).&lt;/p&gt;

&lt;h2 id=&quot;the-future-looks-bright&quot;&gt;The future looks bright&lt;/h2&gt;

&lt;p&gt;Modern CSS is amazing and the future is even better. I love CSS and I enjoy every second I spend coding.&lt;/p&gt;

&lt;p&gt;During the following weeks I’ll write more about how to create maintainable CSS at scale going in depth on the topics that were mentioned on this post.&lt;/p&gt;

&lt;p&gt;What do you think about those advices? Don’t be a stranger, &lt;a href=&quot;https://twitter.com/andresgalante&quot;&gt;tell me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Oct 2017 09:05:00 -0300</pubDate>
        <link>http://localhost:4000/css/2017/10/30/five-killer-tricks-to-make-your-java-webapp-look-awesome.html</link>
        <guid isPermaLink="true">http://localhost:4000/css/2017/10/30/five-killer-tricks-to-make-your-java-webapp-look-awesome.html</guid>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>java</category>
        
        <category>app</category>
        
        <category>bootstrap</category>
        
        <category>patternfly</category>
        
        
        <category>css</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>5 things CSS developers wish they knew when they started</title>
        <description>&lt;p&gt;Beginnings are exciting and scary at the same time. A lot has changed since I started 15 years ago and the market today is much harder than it was at that time. That’s why it’s so important to always keep learning.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;You can learn anything, but you can&amp;#39;t learn everything 🙃&lt;br /&gt;&lt;br /&gt;So accept that, and focus on what matters to you&lt;/p&gt;&amp;mdash; Una Kravets in 🇩🇰 (@Una) &lt;a href=&quot;https://twitter.com/Una/status/903658446263865345&quot;&gt;September 1, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/Una&quot;&gt;Una Kravets&lt;/a&gt; is absolutely right, you just can’t learn everything.&lt;/p&gt;

&lt;p&gt;This is the list of things I would have liked to know if I had to start today:&lt;/p&gt;

&lt;h2 id=&quot;1-dont-underestimate-how-hard-css-is&quot;&gt;1. Don’t underestimate how hard CSS is&lt;/h2&gt;

&lt;p&gt;CSS looks easy. After all it’s just a set of rules that selects an element and modifies it based on a set of properties and values.&lt;/p&gt;

&lt;p&gt;It’s so much more than that.&lt;/p&gt;

&lt;p&gt;A successful CSS project requires the most impeccable architecture. Poorly written CSS is brittle and quickly becomes difficult to maintain. It’s critical you learn how to organize your code in order to create maintainable structures with a long lifespan.&lt;/p&gt;

&lt;p&gt;But even an excellent code base has to deal with the insane amount of devices, screen sizes, capabilities and user preferences. Not to mention accessibility, internationalization and browser support!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS is like a bear cub: cute and inoffensive, but when he grows he’ll eat you alive&lt;/strong&gt;. Experience, hard work and study will teach you how to tame the beast.&lt;/p&gt;

&lt;h2 id=&quot;2-share-and-participate&quot;&gt;2. Share and participate&lt;/h2&gt;

&lt;p&gt;Sharing is so important! How I wish someone had told me that when I started. I’ve spent the first 10 years of my career ignoring the importance of sharing, and when I finally learned, it completely changed  how I viewed my work and working with others.&lt;/p&gt;

&lt;p&gt;Learn git. &lt;a href=&quot;http://andresgalante.com/design/2015/08/31/adopt-a-deisgner.html&quot;&gt;Git is the language of open source&lt;/a&gt; and you definitely want to be part of the it.&lt;/p&gt;

&lt;p&gt;Great developers are kind and generous. A healthy community is full of great developers and you want to be around them. The sooner the better.&lt;/p&gt;

&lt;p&gt;Remember that you are as good as the people that surrounds you, so be kind and generous.&lt;/p&gt;

&lt;p&gt;Share everything you learn. The path is as important as the end result, even the tiniest things can make a difference to others.&lt;/p&gt;

&lt;p&gt;Write and read documentation. Remember that good development is documentation driven development.&lt;/p&gt;

&lt;h2 id=&quot;3-pick-the-right-tools&quot;&gt;3. Pick the right tools&lt;/h2&gt;

&lt;p&gt;Tools are very important, they allow you do your craft.&lt;/p&gt;

&lt;p&gt;Learn your way around your code editor. It should be an extension of your mind.&lt;/p&gt;

&lt;p&gt;It doesn’t matter if you use &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt; or old school &lt;a href=&quot;https://vim.sourceforge.io/&quot;&gt;Vim&lt;/a&gt;, the better you shape your tools to your thought process, the better developer you’ll become. You’ll not only gain speed but also have an uninterrupted thought line that result in a fluid ideas.&lt;/p&gt;

&lt;p&gt;The terminal is your friend.&lt;/p&gt;

&lt;p&gt;There is a lot more about been a CSS developer than writing CSS. Things like building your code, compiling, linting, formatting and browser live refresh are just a tiny part of what you’ll have to deal in a daily bases.&lt;/p&gt;

&lt;p&gt;Pick up your way around the terminal and learn CLI as soon as possible.&lt;/p&gt;

&lt;p&gt;Don’t forget that as a developer you are responsible to stay up to date with best practice. Follow resources like W3C and MDN to stay up to date.&lt;/p&gt;

&lt;h2 id=&quot;4-get-to-know-the-browser&quot;&gt;4. Get to know the browser&lt;/h2&gt;

&lt;p&gt;The browser is not only your canvas, but also a powerful inspector to debug your code, test performance and learn from others. Become comfortable using the inspector.&lt;/p&gt;

&lt;p&gt;Learn how the browser renders your code, what is its inner working and how to improve your work.&lt;/p&gt;

&lt;p&gt;Every browser is different, embrace it. Love them for what they are. (Yes, even IE).&lt;/p&gt;

&lt;h2 id=&quot;5-learn-to-write-maintainable-css&quot;&gt;5. Learn to write maintainable CSS&lt;/h2&gt;

&lt;p&gt;It’ll probably take you years, but if there is just one single skill a CSS developer should have is to write maintainable structures.&lt;/p&gt;

&lt;p&gt;This means knowing exactly how the cascade, the box model and specificity works. Master CSS architecture models, learn their pros and cons and how to implement them.&lt;/p&gt;

&lt;p&gt;This is a hole you can dig for ever, the more you learn the less you’ll know. Keep up with the trends, &lt;strong&gt;have an opinion and only follow the things that makes sense to you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Remember that a modular architecture leads to independent modules, good performance, accessible structures and responsive components (aka CSS happiness).&lt;/p&gt;

&lt;h2 id=&quot;the-future-looks-bright&quot;&gt;The future looks bright&lt;/h2&gt;

&lt;p&gt;Modern CSS is amazing and the future is even better. I love CSS and I enjoy every second I spend coding.&lt;/p&gt;

&lt;p&gt;During the following weeks I’ll write more about how to create maintainable CSS at scale going in depth on the topics that were mentioned on this post.&lt;/p&gt;

&lt;p&gt;What do you think about those advices? Don’t be a stranger, &lt;a href=&quot;https://twitter.com/andresgalante&quot;&gt;tell me on Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Sep 2017 05:00:00 -0300</pubDate>
        <link>http://localhost:4000/css/2017/09/05/things-CSS-developers-wish-they-knew-when-they-started.html</link>
        <guid isPermaLink="true">http://localhost:4000/css/2017/09/05/things-CSS-developers-wish-they-knew-when-they-started.html</guid>
        
        <category>css</category>
        
        <category>design</category>
        
        
        <category>css</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>Do I look thick?</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/border/border.jpg&quot; alt=&quot;Border width makes no sese&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You know that feeling when you use an obscure color name? There is something special about using CSS keywords… or maybe there’s just something really wrong with me.&lt;/p&gt;

&lt;p&gt;This week I massaged my ego by trying to use keywords for border width on &lt;a href=&quot;https://www.patternfly.org/&quot;&gt;PatternFly&lt;/a&gt;. My reasoning was that since nowadays we use relative units for everything except from borders, maybe by using keywords we can achieve cleaner results and ditch fixed units once and for all.&lt;/p&gt;

&lt;p&gt;I couldn’t be more wrong.&lt;/p&gt;

&lt;h2 id=&quot;thin-medium-thick-what-is-it-it-good-for-absolutely-nothing&quot;&gt;Thin, Medium, Thick, what is it it good for? Absolutely nothing!&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/TR/css3-background/#the-border-width&quot;&gt;CSS Backgrounds and Borders Module Level 3&lt;/a&gt; defines &lt;code class=&quot;highlighter-rouge&quot;&gt;border-width&lt;/code&gt; as the property that sets the thickness of the border. Where:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The lengths corresponding to ‘thin’, ‘medium’ and ‘thick’ are not specified, but the values are constant throughout a document and thin ≤ medium ≤ thick. A UA could, e.g., make the thickness depend on the ‘medium’ font size: one choice might be 1, 3 &amp;amp; 5px when the ‘medium’ font size is 17px or less. Negative &lt;length&gt;values are not allowed.”&lt;/length&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After testing these keywords on different browsers we’ve got consistent results:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1px for &lt;code class=&quot;highlighter-rouge&quot;&gt;thin&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;3px for &lt;code class=&quot;highlighter-rouge&quot;&gt;medium&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;and 5px for &lt;code class=&quot;highlighter-rouge&quot;&gt;thick&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;High density screens like a retina display or an iPhone renders 2 times value, as expected. For example a &lt;code class=&quot;highlighter-rouge&quot;&gt;thin&lt;/code&gt; line will render 2px on an iPhone.&lt;/p&gt;

&lt;p&gt;I’ve also noticed that the thickness is not attached to the font size since, meaning it doesn’t change when I modify the font size.&lt;/p&gt;

&lt;h2 id=&quot;awesome-so-whats-the-matter&quot;&gt;Awesome! so, what’s the matter?&lt;/h2&gt;

&lt;p&gt;The problem is that the spec is so loose that renders these keywords useless.&lt;/p&gt;

&lt;p&gt;The fact that a browser is allow to display &lt;code class=&quot;highlighter-rouge&quot;&gt;thin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;medium&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;thick&lt;/code&gt; the exact same width or even change following other measurements like font-size makes using these keywords unpredictable.&lt;/p&gt;

&lt;p&gt;Building with &lt;code class=&quot;highlighter-rouge&quot;&gt;thin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;medium&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;thick&lt;/code&gt; would be the same as building over quicksand. Today ‘thin’ means 1px, tomorrow we don’t know.&lt;/p&gt;

&lt;h2 id=&quot;the-px-to-rems-sass-converter-mixin&quot;&gt;The px to rems Sass converter mixin&lt;/h2&gt;

&lt;p&gt;If you do want to write relative units based on pixels, there are &lt;a href=&quot;https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/&quot;&gt;many sass mixings&lt;/a&gt; you can use. I wrote a small Sass function to translate &lt;code class=&quot;highlighter-rouge&quot;&gt;px&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; too:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$font-size-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browsers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;px-to-rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px-value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px-value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$font-size-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;one-px-border&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; { &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;border-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;px-to-rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you can &lt;a href=&quot;http://blog.andresgalante.com/css/2017/01/27/font-size.html&quot;&gt;read all about it on this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although this is still quicksand, it’s a better solution. The browser font size base can vary and the border will change when the root font size changes, but  hey, maybe that’s what you are looking for anyway!&lt;/p&gt;

&lt;h2 id=&quot;what-did-i-learn&quot;&gt;What did I learn?&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/emHSO5dr6dk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;CSS, much like life and the TV show “Friends” teaches us that the answer to the questions “Do I look &lt;code class=&quot;highlighter-rouge&quot;&gt;thick&lt;/code&gt;?” doesn’t really matters since it’s always a lie.&lt;/p&gt;

&lt;p&gt;I’d love to hear what you think about this. Should I just use pixels and stop whining about it?&lt;/p&gt;
</description>
        <pubDate>Mon, 15 May 2017 05:00:00 -0300</pubDate>
        <link>http://localhost:4000/css/2017/05/15/do-i-look-thick.html</link>
        <guid isPermaLink="true">http://localhost:4000/css/2017/05/15/do-i-look-thick.html</guid>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>patternfly</category>
        
        
        <category>css</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>Mobile, Small, Portrait, Slow, Interlace, Monochrome, Coarse, Non-Hover, First</title>
        <description>
</description>
        <pubDate>Fri, 05 May 2017 07:00:00 -0300</pubDate>
        <link>http://localhost:4000/css/2017/05/05/mobile-small-portrait-slow-interlace-monochrome-coarse-non-hover-first.html</link>
        <guid isPermaLink="true">http://localhost:4000/css/2017/05/05/mobile-small-portrait-slow-interlace-monochrome-coarse-non-hover-first.html</guid>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>patternfly</category>
        
        
        <category>css</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>Touch devices should not be judged by their size</title>
        <description>
</description>
        <pubDate>Mon, 27 Feb 2017 07:00:00 -0300</pubDate>
        <link>http://localhost:4000/css/2017/02/27/touch-devices-not-judged-size.html</link>
        <guid isPermaLink="true">http://localhost:4000/css/2017/02/27/touch-devices-not-judged-size.html</guid>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>patternfly</category>
        
        
        <category>css</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>Lost in font-size translation</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/font-size/font-size.jpg&quot; alt=&quot;Font size pixels to rems&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Beginnings are never easy and setting good foundations for a project is key to avoid
headaches down the road.&lt;/p&gt;

&lt;p&gt;That’s why the CSS Army decided to use relative units to measure typography (and
everything else except from borders) to develop the CSS of the latest version of
PatternFly.&lt;/p&gt;

&lt;h2 id=&quot;rems&quot;&gt;Rems&lt;/h2&gt;

&lt;p&gt;We measure fonts-sizes in rems.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“rem values are relative to the root html element.”&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/font-size#Rems&quot;&gt;Mozilla Developer Network&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example if the root html is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;20px&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;1rem = 20 px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The trick is to avoid hard coding a font-size for the html element. That way
1rem will be equal to the font size base of the browser. In most cases it’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;16px&lt;/code&gt;, but users can set it larger or smaller, or browsers can have a larger or
smaller root font size according to its environment.&lt;/p&gt;

&lt;p&gt;By using rems the typography hierarchy changes proportionally following the
browser’s setting.&lt;/p&gt;

&lt;p&gt;It sounds awesome, right? Well… there is one challenge.&lt;/p&gt;

&lt;p&gt;Photoshop can’t do font-sizes in rems. And when the visual designers delivers a
mock up with a font-size in &lt;code class=&quot;highlighter-rouge&quot;&gt;px&lt;/code&gt; we need to find a way to express it in &lt;code class=&quot;highlighter-rouge&quot;&gt;rems&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;math-and-sass-to-the-rescue&quot;&gt;Math and Sass to the rescue&lt;/h2&gt;

&lt;p&gt;With a little bit of math, the translation from px to rem is easy. First we
create a variable to set a value for the root. We don’t apply this value to any
element, it works just as a reference point.&lt;/p&gt;

&lt;p&gt;Since most browsers font size base is &lt;code class=&quot;highlighter-rouge&quot;&gt;16px&lt;/code&gt;, then the font-size-root variable is
&lt;code class=&quot;highlighter-rouge&quot;&gt;16&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;font-size-root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s say that the visual designer sets the h1 to 24px. If this equation is true [24 = 24/16 * 16], then this is also true [24 = (24 / $font-size-root) * 1rem] since $font-size-root and 1rem represent the same value. Additionally, since (24 / $font-size-root) yields a numeric value of 1.5 without a unit, multiplying this value by 1rem provides the rem unit, making the final result of this equation 1.5rem.&lt;/p&gt;

&lt;p&gt;The sass formula end up been:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;font-size-root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1rem&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Putting it all together it looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;font-size-root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1-font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;font-size-root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h1-font-size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;its-like-cheating&quot;&gt;It’s like cheating&lt;/h2&gt;

&lt;p&gt;We are using this technique to set font-sizes, margins and paddings and it has
yielded excellent results.&lt;/p&gt;

&lt;p&gt;It’s not like cheating, it is cheating. It is also the best way to reproduce
Photoshop image in code maintaining the benefits of relative units.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE 5/15/2017&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To make things easier, I wrote a Sass function to translate &lt;code class=&quot;highlighter-rouge&quot;&gt;px&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$font-size-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browsers&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;px-to-rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$px&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$font-size-root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; { &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;px-to-rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 27 Jan 2017 05:00:00 -0300</pubDate>
        <link>http://localhost:4000/css/2017/01/27/font-size.html</link>
        <guid isPermaLink="true">http://localhost:4000/css/2017/01/27/font-size.html</guid>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>patternfly</category>
        
        
        <category>css</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>Just because a device is large, it doesn't mean it doesn't want to be touched</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/touch/touch.jpg&quot; alt=&quot;Touch screens media query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s face it, front end development is a bitch.&lt;/p&gt;

&lt;p&gt;As we started discussing how to design enterprise application UI element on mobile environments, the talented ladies working with me (yes, I am talking about you Jenn and Sarah) pointed out that touch devices should not be judge by their size.&lt;/p&gt;

&lt;p&gt;Assuming that a small viewport device has a touch screen and a large doesn’t is a mistake since the twisted minds in the hardware industry have created massive touchscreen TVs, really large tablets like the iPad Pro and even a huge touch desktop PCs like the new (and jaw dropping) Surface Studio.&lt;/p&gt;

&lt;p&gt;This adds a new layer of complexity to the already complicated world of interaction design and front end development.&lt;/p&gt;

&lt;p&gt;Responsive viewport media queries are great to accommodate our UIs elements, but designing small clickable areas on large screens guessing that our users will have a mouse pointer is a mistake.&lt;/p&gt;

&lt;p&gt;We know we can detect touch screens with tools like &lt;a href=&quot;https://modernizr.com/&quot;&gt;modernizr&lt;/a&gt;, but I want to keep our &lt;a href=&quot;http://www.patternfly.org/&quot;&gt;PatternFly&lt;/a&gt; CSS efforts away from javascript. Is there a way to query a touch screen with CSS? Spoiler alert: the answer is yes!&lt;/p&gt;

&lt;h2 id=&quot;interaction-media-features&quot;&gt;Interaction Media Features&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3.org/Style/CSS/members.en.php3&quot;&gt;The nice people at the W3C CSS Working Group&lt;/a&gt; have been guiding the CSS community to a solution.&lt;/p&gt;

&lt;p&gt;On the &lt;a href=&quot;https://drafts.csswg.org/mediaqueries/&quot;&gt;Media Queries Level 4 Working Draft&lt;/a&gt; there is a spec for &lt;a href=&quot;https://drafts.csswg.org/mediaqueries/#mf-interaction&quot;&gt;Interaction Media Features&lt;/a&gt; that includes three definitions: &lt;a href=&quot;https://drafts.csswg.org/mediaqueries/#pointer&quot;&gt;Pointing Device Quality&lt;/a&gt;, &lt;a href=&quot;https://drafts.csswg.org/mediaqueries/#hover&quot;&gt;Hover Capability&lt;/a&gt; and &lt;a href=&quot;https://drafts.csswg.org/mediaqueries/#any-input&quot;&gt;Rare Interaction Capabilities&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Together they allow a media query to be set based on the presence and accuracy of the user’s pointing device, and whether they have the ability to hover over elements on the page.&lt;/p&gt;

&lt;p&gt;Let’s take a close look at each one of them.&lt;/p&gt;

&lt;h3 id=&quot;pointing-device-quality-the-pointer-feature&quot;&gt;Pointing Device Quality: the pointer feature&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The pointer media feature is used to query about the presence and accuracy of a pointing device such as a mouse. If a device has multiple input mechanisms, the pointer media feature must reflect the characteristics of the “primary” input mechanism, as determined by the user agent.” - W3C&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The key word here is “accuracy” of the pointing device.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A mouse or a drawing styluses is very accurate and it takes the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;fine&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A finger or a Kinect peripheral isn’t, and it takes the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;coarse&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore we can detect if a screen is touch with a simple media query. This is useful for example to make hit areas larger if the user has a touch screen.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coarse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;hover-capability-the-hover-feature&quot;&gt;Hover Capability: the hover feature&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The hover media feature is used to query the user’s ability to hover over elements on the page. If a device has multiple input mechanisms, the hover media feature must reflect the characteristics of the “primary” input mechanism, as determined by the user agent.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s important to notice that it only evaluates the primary input device. A device with multiple input mechanisms that’s able to hover will query as “none”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“For example, a touchscreen where a long press is treated as hovering would match hover: none.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;A touch screen device where the primary point system is the finger and can’t hover will take the value of “none”&lt;/li&gt;
  &lt;li&gt;A device where the primary input is mouse and can easily hover parts of the page takes the value of “hover”&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A classic example to use this query is a dropdown menu.&lt;/p&gt;

&lt;h3 id=&quot;rare-interaction-capabilities-the-any-pointer-and-any-hover-features&quot;&gt;Rare Interaction Capabilities: the any-pointer and any-hover features&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The any-pointer and any-hover media features are identical to the pointer and hover media features, but they correspond to the union of capabilities of all the pointing devices available to the user. More than one of their values can match, if different pointing devices have different characteristics. They must only match none if all of the pointing devices would match none for the corresponding query, or there are no pointing devices at all.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is rarely used. An example can be a touch TV that also has a pointer device.&lt;/p&gt;

&lt;h3 id=&quot;device-examples&quot;&gt;Device examples&lt;/h3&gt;

&lt;p&gt;Typical examples of devices matching combinations of pointer and hover:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pointer: coarse&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pointer: fine&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hover: none&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;smartphones, touch screens&lt;/td&gt;
      &lt;td&gt;stylus-based screens (Cintiq, Wacom, etc)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hover: hover&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Nintendo Wii controller, Kinect&lt;/td&gt;
      &lt;td&gt;mouse, touch pad&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This is really cool, right? I hear you shouting: what about browser support?&lt;/p&gt;

&lt;h2 id=&quot;browser-support-isnt-poop-at-all&quot;&gt;Browser support isn’t :poop: at all!&lt;/h2&gt;

&lt;p&gt;Even though this is a working draft it has &lt;a href=&quot;http://caniuse.com/#feat=css-media-interaction&quot;&gt;pretty good support&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://codepen.io/andresgalante/pen/bBEJKg?editors=0100&quot;&gt;My simple test&lt;/a&gt; proved successful on Chrome, Chrome for Android, Safari, Edge, Opera, Samsung browser and Android Browser but it didn’t work on FireFox, Opera Mini or IE.&lt;/p&gt;

&lt;iframe height=&quot;300&quot; scrolling=&quot;no&quot; title=&quot;Touch screen test&quot; src=&quot;//codepen.io/andresgalante/embed/bBEJKg/?height=300&amp;amp;theme-id=20015&amp;amp;default-tab=css,result&amp;amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;FireFox and IE &lt;a href=&quot;https://www.netmarketshare.com/browser-market-share.aspx?qprid=0&amp;amp;qpcustomd=1&quot;&gt;represent only a bit more than 2% mobile/tablet browser market share&lt;/a&gt;. I couldn’t find information about touch TVs or other touch screens devices that are not mobile or tablets.&lt;/p&gt;

&lt;p&gt;I think we are ready to take the progressive engagement approach with this feature, and as FireFox adds support for it and IE dies once and for all we will have full support.&lt;/p&gt;

&lt;h2 id=&quot;have-i-mention-that-front-end-development-is-a-bitch&quot;&gt;Have I mention that front end development is a bitch?&lt;/h2&gt;

&lt;p&gt;This exponentially opens the door to exciting new challenges (and by “challenges” I mean “problems”).&lt;/p&gt;

&lt;p&gt;The obvious immediate enhancement on our UIs are around click zones with &lt;code class=&quot;highlighter-rouge&quot;&gt;pointer&lt;/code&gt; and dropdowns with &lt;code class=&quot;highlighter-rouge&quot;&gt;hover&lt;/code&gt;. But I am sure there are nifty mysterious ways to use these features that people smarter than me (and I am pointing at you Jenn and Sarah again) will discover.&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Nov 2016 07:00:00 -0300</pubDate>
        <link>http://localhost:4000/css/2016/11/13/interaction-media.html</link>
        <guid isPermaLink="true">http://localhost:4000/css/2016/11/13/interaction-media.html</guid>
        
        <category>css</category>
        
        <category>design</category>
        
        <category>patternfly</category>
        
        
        <category>css</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>The Tree of Wisdom</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/tree/tree.jpg&quot; alt=&quot;PatternFly decision tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Think about a design system as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tamagotchi&quot;&gt;tamagotchi&lt;/a&gt;. To keep it alive once your turn it on, you need to take care of it: keep it clean, feed it and make it sleep, almost like a living creature.&lt;/p&gt;

&lt;p&gt;That’s why supporting and maintaining a design system can be more challenging than initially creating it. A smart strategy, really good rules and a lot of love and patience is the only way to guarantee long-term success.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A critical part of design system maintenance is ensuring that UI patterns stay up to date, embrace evolving design and development best practices, and continue to address the real needs of the organization.” - &lt;a href=&quot;http://atomicdesign.bradfrost.com/chapter-5/#making-changes-to-patterns&quot;&gt;Brad Frost&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To govern the &lt;a href=&quot;https://docs.vanillaframework.io/&quot;&gt;Vanilla Design System&lt;/a&gt;, the Canonical web team developed a fascinating decision tree and PatternFly took a similar approach.&lt;/p&gt;

&lt;h2 id=&quot;the-patternfly-decision-tree&quot;&gt;The PatternFly Decision Tree&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/a/redhat.com/file/d/0By4Lm65O5b3rTGhPZTVnSThyLWc/view?usp=sharing&quot;&gt;&lt;img src=&quot;/img/tree/patternfly-decision-tree.png&quot; alt=&quot;PatternFly decision tree&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goal for PatternFly is to deliver a set of common and modular UI components. The goal of the PatternFly decision tree is to identify common components and that we have all the parts to build them.&lt;/p&gt;

&lt;p&gt;To define what makes a component common, we chose to follow a simple general rule: if more than two projects using PatternFly are asking for the same component, then it’s considered common.&lt;/p&gt;

&lt;p&gt;To determine whether or not a component is modular requires deconstructing the component into smaller blocks to understand the underlying structure of that component. That way we can ensure we are building reusable parts instead of reinventing the wheel every time we introduce a new pattern.&lt;/p&gt;

&lt;p&gt;The three outcomes are for a pattern to be modified, added, or removed from the design system.&lt;/p&gt;

&lt;h2 id=&quot;practicing-what-we-preach&quot;&gt;Practicing What We Preach&lt;/h2&gt;

&lt;p&gt;This process doesn’t only apply to new patterns. We are running our existing components through the decision tree.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A design system needs ongoing maintenance, support, and tender loving care for it to truly thrive.” - &lt;a href=&quot;http://atomicdesign.bradfrost.com/chapter-5/#establishing-a-design-system-team&quot;&gt;Brad Frost&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will have be having regular assessments to make sure components stand the test of time and modify or remove them as needed.&lt;/p&gt;

&lt;p&gt;Just like PatternFly, the decision tree is not set in stone. Both are living resources that will evolve as we care for them and give them love.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 08:00:00 -0300</pubDate>
        <link>http://localhost:4000/patternfly/2016/11/09/patternfly-decision-tree.html</link>
        <guid isPermaLink="true">http://localhost:4000/patternfly/2016/11/09/patternfly-decision-tree.html</guid>
        
        <category>design</category>
        
        <category>patternfly</category>
        
        <category>decision</category>
        
        <category>maintenance</category>
        
        
        <category>patternfly</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>5 traits I’ve learned about leadership</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/leadership/leadership.jpg&quot; alt=&quot;leadership&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have the best job in the world. I work in a &lt;a href=&quot;https://www.redhat.com/&quot;&gt;great company&lt;/a&gt;, doing what I love in a &lt;a href=&quot;https://www.patternfly.org/&quot;&gt;large scale open source project&lt;/a&gt;, surrounded by talented people that I like and respect, and with all the resources I could ask for.&lt;/p&gt;

&lt;p&gt;This environment can only be accomplished because I work besides great leaders, and even though they are different, they all share some qualities:&lt;/p&gt;

&lt;h2 id=&quot;1-they-are-empathic&quot;&gt;1. They are empathic&lt;/h2&gt;

&lt;p&gt;Great leaders have the ability to understand and relate to their community in a selfish, kind and open way. They know how to listen and they can make any group feel taken care of, no matter what size it is.&lt;/p&gt;

&lt;p&gt;They don’t fake it, they truly care, that’s why they are loved.&lt;/p&gt;

&lt;h2 id=&quot;2-they-are-brave&quot;&gt;2. They are brave&lt;/h2&gt;

&lt;p&gt;Great leaders are quick to decide and quick to change. They know who they are, what they stand for and where they are going. That’s why they can reverse engineer their goals. They are are quick to decide and act, and quick to pivot when things go wrong. They change and adapt.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It is not the strongest of the species, nor the most intelligent that survives. It is the one that is most adaptable to change.”
Charles Darwin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That braveness and sense of security makes them curious. Great leaders aren’t afraid of their ignorance. They are always willing to learn and they are constantly looking for new challenges to tackle.&lt;/p&gt;

&lt;h2 id=&quot;3-they-put-themselves-in-the-front-line&quot;&gt;3. They put themselves in the front line&lt;/h2&gt;

&lt;p&gt;A great leader would never ask for something he is not willing to do. Some of the best generals in history went to the front lines, and their armies defended them with their life, a devotion that drove victories against all odds. They lead by example and make sure to walk the talk.&lt;/p&gt;

&lt;h2 id=&quot;4-they-are-patient&quot;&gt;4. They are patient&lt;/h2&gt;

&lt;p&gt;Great leaders are aware that things don’t happen overnight. This is not a matter of speed, most of them go fast, but they are wise enough to know when to stop and think, how to react on different circumstances and how to generate the conditions for their projects to flourish. Something that can only be achieved if they enjoy the virtue of patience.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“He that can have patience can have what he will.”
Benjamin Franklin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5-they-are-grateful&quot;&gt;5. They are grateful&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ted.com/talks/david_steindl_rast_want_to_be_happy_be_grateful?language=en&quot;&gt;Giving thanks can make anyone happier&lt;/a&gt;, but great leaders are truly grateful. They feel indebted to their surroundings and they are convinced that their achievements are due to their community successes. It’s a motivation that keeps them going.&lt;/p&gt;

&lt;p&gt;Great leaders are not born or appointed, they are chosen. If I ever earn that privilege, I wish I can be as good as the ones I follow and admire.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Oct 2016 20:05:36 -0300</pubDate>
        <link>http://localhost:4000/random/2016/10/23/patternfly-spaces.html</link>
        <guid isPermaLink="true">http://localhost:4000/random/2016/10/23/patternfly-spaces.html</guid>
        
        <category>random</category>
        
        <category>patternfly</category>
        
        <category>leadership</category>
        
        
        <category>random</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
      <item>
        <title>Dance to the new PatternFly flow</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/spaces/spaces.jpg&quot; alt=&quot;PatternFly new visuals&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you follow this blog you should know that for the past two years I’ve been a contributor to &lt;a href=&quot;https://www.patternfly.org/&quot;&gt;the PatternFly project&lt;/a&gt;. Five month ago, I’ve joined the PatternFly team and I am working full time to push the boundaries of open source design.&lt;/p&gt;

&lt;p&gt;We are currently working on PatterFly 4, a major release that will include design and code improvements. The two main design changes that we are introducing are around typography and spaces, including a much necessary &lt;a href=&quot;https://medium.com/attack-the-front/your-body-text-is-too-small-5e02d36dc902#.o9y3t6r40&quot;&gt;font size base bump&lt;/a&gt; to 14px and moving our font family from &lt;a href=&quot;https://fonts.google.com/specimen/Open+Sans&quot;&gt;Open
Sans&lt;/a&gt; to &lt;a href=&quot;http://overpassfont.org/&quot;&gt;Overpass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read all about these typography revisions on &lt;a href=&quot;https://github.com/orgs/patternfly/people/kybaker&quot;&gt;Kyle Bakers&lt;/a&gt; &lt;a href=&quot;https://blog.patternfly.org/choosing-the-best-font-for-application-design/&quot;&gt;article on the PatterFly blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;spacing-rhythm-and-flow&quot;&gt;Spacing, Rhythm and Flow&lt;/h2&gt;

&lt;p&gt;One of the key elements of both print and web design is the way the typography flows, we call it Rhythm.&lt;/p&gt;

&lt;p&gt;There are several books and articles explaining what Typographic Rhythm is. If you are looking for an in depth detail about typography you should read &lt;a href=&quot;https://www.amazon.com/Elements-Typographic-Style-Robert-Bringhurst/dp/0881791326&quot;&gt;The Elements of Typographic Style&lt;/a&gt; else, I recommend &lt;a href=&quot;http://typecast.com/blog/4-simple-steps-to-vertical-rhythm&quot;&gt;this article by Shelly Wilson&lt;/a&gt; on the &lt;a href=&quot;http://typecast.com/&quot;&gt;typecast blog&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rhythm is just a repeated pattern. The more consistent the pattern, the better the rhythm. In music, it’s the structure that ties all the different instruments together. Even if the notes are correct, a song with an inconsistent rhythm is pretty hard to listen to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In design, vertical rhythm is the structure that guides a reader’s eye through the content. Good vertical rhythm makes a layout more balanced and beautiful and its content more readable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The time signature in sheet music visually depicts a song’s rhythm, while for us, the lines of the baseline grid depict the rhythm of our content and give us guidelines to align text and objects to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore the typographic change we are introducing to PatternFly 4 would be incomplete without an overall adjustment of spaces.&lt;/p&gt;

&lt;h2 id=&quot;relative-spaces&quot;&gt;Relative spaces&lt;/h2&gt;

&lt;p&gt;To define spaces on PatternFly 4 we will use &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/length&quot;&gt;CSS relative units&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each one of these units are relative to a different base, some are based on the viewport size, others to the size of the container element, and others to the size of the font.&lt;/p&gt;

&lt;p&gt;In our case we will use &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt;. The &lt;a href=&quot;https://www.w3.org/TR/2016/CR-css-values-3-20160929/#rem&quot;&gt;W3C CSS specs&lt;/a&gt; define &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Equal to the computed value of font-size on the root element. When specified on the font-size property of the root element, the rem units refer to the property’s initial value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since PatterFly 4 root font size is &lt;code class=&quot;highlighter-rouge&quot;&gt;14px&lt;/code&gt;, then &lt;code class=&quot;highlighter-rouge&quot;&gt;1rem = 14px&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;2rem = 28px&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0.5rem = 7px&lt;/code&gt;… well you get the idea.&lt;/p&gt;

&lt;p&gt;This system will define all our spaces, from typography, paddings and margins to grids and gutters.&lt;/p&gt;

&lt;h2 id=&quot;variables-and-utility-classes&quot;&gt;Variables and utility classes&lt;/h2&gt;

&lt;p&gt;To ensure consistency we are delineating spacing with Sass variables and utility classes.&lt;/p&gt;

&lt;p&gt;Since PatterFly 4 is based on &lt;a href=&quot;http://v4-alpha.getbootstrap.com/&quot;&gt;Bootstrap 4&lt;/a&gt;, we will be able to &lt;a href=&quot;http://v4-alpha.getbootstrap.com/utilities/spacing/&quot;&gt;take advantage&lt;/a&gt; of the &lt;a href=&quot;https://github.com/twbs/bootstrap/blob/v4-dev/scss/_variables.scss#L79-L100&quot;&gt;nifty utility sass variable&lt;/a&gt; to build our spacing.&lt;/p&gt;

&lt;p&gt;Using sass variables to set the utility classes will keep our code DRY, maintain consistency and allowing users to easily create spaces on their implementations.&lt;/p&gt;

&lt;h2 id=&quot;work-in-progress&quot;&gt;Work in progress&lt;/h2&gt;

&lt;p&gt;As a start point we are basing our components on a set of default spaces:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-xxxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-xxs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-sm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-md&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;17px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-xl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-xxl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-xxxl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;px&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pf-spacer-xxxxl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$spacer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;px&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But I am sure that as we move forward adding components to the &lt;a href=&quot;https://github.com/patternfly/patternfly-atomic&quot;&gt;new PatterFly Atomic repo&lt;/a&gt;, we will need to adjust removing or adding variables.&lt;/p&gt;

&lt;h2 id=&quot;want-to-dance-with-us&quot;&gt;Want to dance with us?&lt;/h2&gt;

&lt;p&gt;This is without a doubt the best CSS project I’ve ever work with.&lt;/p&gt;

&lt;p&gt;If you want to join the talented &lt;strong&gt;UXD CSS Army:heart:&lt;/strong&gt; send an email to &lt;a href=&quot;mailto:patternfly@redhat.com&quot;&gt;the PatterFly mailing list&lt;/a&gt;, contact us on the &lt;a href=&quot;http://patternfly.slack.com&quot;&gt;Slack&lt;/a&gt; or &lt;a href=&quot;http://webchat.freenode.net/?channels=#patternfly&quot;&gt;IRC channel&lt;/a&gt;, or just &lt;a href=&quot;https://github.com/patternfly/patternfly-atomic&quot;&gt;fork the repo&lt;/a&gt; and send us a PR :smile:&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Oct 2016 20:05:36 -0300</pubDate>
        <link>http://localhost:4000/patternfly/2016/10/22/five-traits-about-leadership.html</link>
        <guid isPermaLink="true">http://localhost:4000/patternfly/2016/10/22/five-traits-about-leadership.html</guid>
        
        <category>news</category>
        
        <category>patternfly</category>
        
        <category>spacing</category>
        
        <category>CSS</category>
        
        
        <category>patternfly</category>
        
        <author>
          <name>Andres Galante</name>
          <email>a@andresgalante.com</email>
        </author>
      </item>
    
  </channel>
</rss>
